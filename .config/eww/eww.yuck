(defwidget bar []
  (centerbox :orientation "h"
    :space-evenly false
    (leftside
      :class "leftside"
      (workspaces :monitor 0)
      (ws-layout-0))
    (music)
    (sidestuff)))

(defwidget bar1 []
  (centerbox :orientation "h"
    :space-evenly false
    (leftside
      :class "leftside"
      (workspaces :monitor 1)
      (ws-layout-1))
    (music)
    (sidestuff)))

(defwidget _buttons []
  (box :class "btns-box" :spacing 5
    :vexpand true :hexpand true
    :valign "end" :halign "end"
    :space-evenly false
    (button :onclick "thunar &" "thunar")))


(defwidget leftside [class]
  (box :class class :orientation "h" :space-evenly false :halign "start"
    (children)
    (wmtitle)))


(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    ; (_buttons)
    (dotfiles)
    (system_graphs)
    (volume)
    (time)
    (date)))


(deflisten workspace-layout-1 'leftwm-state -w 1 -s "{{workspace.layout}}"')
(defwidget ws-layout-1 []
  (box
    :class "layout"
    :halign "start"
    (eventbox :onscroll "sh ./scripts/layoutscroll {}" :onclick "leftwm-command \"SetLayout MainAndVertStack\""
    {workspace-layout-1})
  )
)
(deflisten workspace-layout-0 'leftwm-state -w 0 -s "{{workspace.layout}}"')
(defwidget ws-layout-0 []
  (box
    :class "layout"
    :halign "start"
    (eventbox :onscroll "sh ./scripts/layoutscroll {}" :onclick "leftwm-command \"SetLayout MainAndVertStack\""
    {workspace-layout-0})
  )
)


; eww is natively able to parse the JSON output of `leftwm-state`
; since eww also has the ability of `for` loops there is no need for a `liquid` template anymore
(defwidget workspaces [monitor]
  (eventbox :class "workspaces"
    :orientation "h"
    :space-evenly true
    :halign "start"
    :spacing 10
    :onscroll "sh ./scripts/workspacescroll {}"
    (box
      (for tag in '${wmstate.workspaces[0].tags}'
        (button
          :class {tag.focused ? "ws-button-focused" :
          tag.visible ? "ws-button-visible" :
          tag.urgent ? "ws-button-urgent" :
          tag.busy ? "ws-button-busy" : "ws-button"}
          :onclick "leftwm-command \"SendWorkspaceToTag ${monitor} ${tag.index}\""
          :onrightclick "leftwm-command \"SendWorkspaceToTag ${music != 0 ? 1 : 0} ${tag.index}\""
          {tag.name == "term" ? "ÔÑ†" :
          tag.name == "web" ? "Ôâ®" :
          tag.name == "dev" ? "Ôõå" :
          tag.name == "code" ? "ÔÑ°" :
          tag.name == "chat" ? "ÔÇÜ" :
          tag.name == "files" ? (tag.focused ? "ÔÅº" : "ÓÜÖ") :
          tag.name == "admin" ? (tag.focused ? "Ôîò" : "ÔÄ≠") :
          tag.name == "sys" ? "ÔÄì" :
        tag.name == "vid" ? "ÔÄΩ" : "${tag.name}"})))))

(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
  {music != "" ? "üéµ${music}" : ""}))


(defwidget dotfiles []
  (box :class "git" {dotfilesgit}))

(defwidget time []
  (box :class "time" {time}))
(defwidget date []
  (box :class "date" {date}))

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)
(defpoll BATTERY_STATUS :interval "5s" `scripts/sys_info --bat-status`)
(defpoll RANDOM :interval "1s" `shuf -i 1-100 -n 1`)
;; system
(defwidget system []
  (box :class "system" :vexpand "false" :hexpand "false"
    (box :orientation "h" :spacing 10 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :class "cpu_bar" :orientation "h" :spacing 3 :space-evenly "false" :vexpand "false" :hexpand "false"
        ; (label :class "iconcpu" :text "Ó•ê")
        (scale :min 0 :max 100 :value CPU_USAGE :active "false"))
      (box :class "mem_bar" :orientation "h" :spacing 3 :space-evenly "false" :vexpand "false" :hexpand "false"
        ; (label :class "iconmem" :text "Ó¶π")
        (scale :min 0 :max 100 :value MEM_USAGE :active "false"))
      (box :class "bright_bar" :orientation "h" :spacing 3 :space-evenly "false" :vexpand "false" :hexpand "false"
        ; (label :class "iconbright" :text "Óß£")
        (scale :min 0 :max 100 :value BLIGHT :active "false"))
      (box :class {BATTERY < 50 ? "bat_bar -verylow" : BATTERY < 25 ? "bat_bar -low" : "bat_bar"} :orientation "h" :spacing 8 :space-evenly "false" :vexpand "true" :hexpand "false"
        (label :class "icon_notcharging" :text {BATTERY_STATUS == 'Charging' ? "" : "ÔâÇ"})
        (label :class "bat_label" :text {BATTERY})
        (graph :class "bat_graph" :min 0 :max 100 :value BATTERY :thickness 2 :time-range 1 :active "false")
        ; (scale :min 0 :max 100 :value BATTERY :active "false")
      ))))
(defwidget system_graphs []
  (box :class "system" :vexpand "false" :hexpand "false"
    (box :orientation "h" :spacing 10 :halign "stretch"
      (scale_and_graph :class "cpu_graph" :value CPU_USAGE :visible true)
      (scale_and_graph :class "mem_graph" :value MEM_USAGE :visible true)
      (scale_and_graph :class "bat_graph" :value BATTERY :visible {BATTERY < 90})
    )))

(defwidget scale_and_graph [value class visible]
  (box :class class :orientation "v" :space-evenly "false" :visible {visible}
    (graph :class "graph" :line-style "miter" :width 50 :min 0 :max 100 :value value :thickness 2 :vexpand "true" :time-range "30s")
    (box :class "bar" :orientation "h" :spacing 3 :space-evenly "false" :vexpand "false" :hexpand "false"
      (scale :min 0 :max 100 :value value :active "false"))
  ))


;; Volume vars
(defpoll VOLUME :interval "1s" `pamixer --get-volume`)
;; volume
(defwidget volume []
  (box :class "volume" :vexpand "false" :hexpand "false"
    (eventbox
      :orientation "h"
      :spacing 10
      :halign "center"
      :valign "center"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      :onscroll "scripts/volume --scroll {}"
      (box :class "vol_bar" :spacing 5 :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconvol" :text "ÔÄ®")
        (scale
          :min 0
          :max 100
          :value VOLUME
        :active "false")))))


(deflisten music :initial ""
"playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s" :initial "50"
"scripts/getvol")

(defpoll dotfilesgit :interval "1s" :initial ""
"sh ./scripts/dotfilesgit")


(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 100
      :active {onchange != ""}
      :value value
    :onchange onchange)))

(defpoll date :interval "10s"
"date '+%d %a %b'")
(defpoll time :interval "10s"
"date '+%H:%M'")

(deflisten wmstate
  :initial '{"workspaces":[{"layout":"","tags":[{"name":"","index":0,"mine":false,"busy":false,"visible":false,"urgent":false}]}]}'
"leftwm state")

(defwidget wmtitle []
  (box :class "wmtitle" {wmstate.window_title}))

(defwindow bar0
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "25px")
  (bar))

(defwindow bar1
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "25px")
  (bar1))

