(defwidget bar []
  (centerbox :orientation "h"
    :space-evenly false
    (leftside
      :class "leftside"
      (workspaces :monitor 0)
      (ws-layout-0))
    (music)
    (sidestuff)))

(defwidget bar1 []
  (centerbox :orientation "h"
    :space-evenly false
    (leftside
      :class "leftside"
      (workspaces :monitor 1)
      (ws-layout-1))
    (music)
    (sidestuff)))

(defwidget _buttons []
  (box :class "btns-box" :spacing 5
    :vexpand true :hexpand true
    :valign "end" :halign "end"
    :space-evenly false
    (button :onclick "thunar &" "thunar")))


(defwidget leftside [class]
  (box :class class :orientation "h" :space-evenly false :halign "start"
    (children)))


(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    ; (_buttons)
    (dotfiles)
    (metric :label "ðŸ”Š"
      :value volume
    :onchange "amixer -D default sset Master {}%")
    (metric :label "ï¡š"
      :value '${EWW_RAM.used_mem_perc}'
    :onchange "")
    (metric :label "ïœŠ"
      :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
    :onchange "")
    (time)))


(deflisten workspace-layout-1 'leftwm-state -w 1 -s "{{workspace.layout}}"')
(defwidget ws-layout-1 []
  (box
    :class "layout"
    :halign "start"
    (eventbox :onscroll "sh ./scripts/layoutscroll {}" :onclick "leftwm-command \"SetLayout MainAndVertStack\""
    {workspace-layout-1})
  )
)
(deflisten workspace-layout-0 'leftwm-state -w 0 -s "{{workspace.layout}}"')
(defwidget ws-layout-0 []
  (box
    :class "layout"
    :halign "start"
    (eventbox :onscroll "sh ./scripts/layoutscroll {}" :onclick "leftwm-command \"SetLayout MainAndVertStack\""
    {workspace-layout-0})
  )
)


; eww is natively able to parse the JSON output of `leftwm-state`
; since eww also has the ability of `for` loops there is no need for a `liquid` template anymore
(defwidget workspaces [monitor]
  (eventbox :class "workspaces"
    :orientation "h"
    :space-evenly true
    :halign "start"
    :spacing 10
    :onscroll "sh ./scripts/workspacescroll {}"
    (box
      (for tag in '${wmstate.workspaces[0].tags}'
        (button
          :class {tag.focused ? "ws-button-focused" :
          tag.visible ? "ws-button-visible" :
          tag.urgent ? "ws-button-urgent" :
          tag.busy ? "ws-button-busy" : "ws-button"}
          :onclick "leftwm-command \"SendWorkspaceToTag ${monitor} ${tag.index}\""
          :onrightclick "leftwm-command \"SendWorkspaceToTag ${music != 0 ? 1 : 0} ${tag.index}\""
        "${tag.name}")))))

(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
  {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget dotfiles []
  (box :class "git" {dotfilesgit}))

(defwidget time []
  (box :class "time" {time}))


(deflisten music :initial ""
"playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s" :initial "50"
"scripts/getvol")

(defpoll dotfilesgit :interval "1s" :initial ""
"sh ./scripts/dotfilesgit")


(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 100
      :active {onchange != ""}
      :value value
    :onchange onchange)))

(defpoll date :interval "10s"
"date '%b %d, %Y'")
(defpoll time :interval "10s"
"date '+%H:%M'")

(deflisten wmstate
  :initial '{"workspaces":[{"layout":"","tags":[{"name":"","index":0,"mine":false,"busy":false,"visible":false,"urgent":false}]}]}'
"leftwm state")

(defwindow bar0
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "25px")
  (bar))

(defwindow bar1
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "25px")
  (bar1))
